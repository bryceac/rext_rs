=rext_rs=

'''Description:''' Rust port of <a href="https://github.com/bryceac/rext">rext</a>.

'''Version:''' 0.1

'''Creator:''' Bryce Campbell

'''License:''' See License

==Notes==

This application has only been tested on Windows 10, but should work on any system that can compile and run Rust applications.

It <strong>should</strong> have the same capabilities of the 0.2 release of the original version written in Apple's Swift, which provides some better conveniences, as some features were added to that variant while working on this.

===Building===

This tool requires Cargo, which should be included as part of the [https://doc.rust-lang.org/book/ch01-01-installation.html Rust installation process], as that is the only way to import dependencies.

To build the program, run the following in the directory after cloning this repo or downloading the archive:

<pre>
cargo build
</pre>

This will create an executable that can be immediate run via:

<pre>
cargo run
</pre>

Arguments can be passed by placing anything meant for the binary like this:

<pre>
cargo run -- php txt
</pre>

===Installation===

To install this program on a machine, one can do one of two things.

You can either run the following as root/superuser on a Unix-like OS:

<pre>
make install
</pre>

Or use the MSI file that should be included with releases, if on Windows.

However, you are using either Mac or Linux, I strongly recommend installing via Homebrew, using my homebrew repositories, which will install the Swift versiom and include a man page, while this one will not.

===Usage===

While things are quite similiar to the original version written in Swift, there are some differences.

For example, while flags and options can be combined in the Swift version, the same cannot be done here.

So, specifying a directory and working recurively would be done like this:

<pre>
rext -d ~/Documents -r php txt
</pre>

I am not sure when or if this will be fix, as I plan to only work on this port until the Swift Package Manager finally works on more than just Mac and Linux.

Otherwise, things should be no different, aside from the code used to perform the same operations.

===Support===

Being that I am not as experienced with Rust as I am with Swift, and that I have a higher preference for Swift, I will likely not be able to be of much help, especially considering that some issues may reside with the crates used. 

However, I will try my best for as long as I work on this port of the program, which will be on as needed basis.